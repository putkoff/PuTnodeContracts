PutNodes Ecosystem - Smart Contract Documentation
\n\n\n
Overview

The PutNodes ecosystem is a comprehensive framework of interconnected smart contracts built for decentralized networks. This document offers an exhaustive insight into each smart contract within the PutNodes ecosystem, elucidating their functionalities and relationships.

The data below represents the principal contract at the forefront of the ecosystem. We will present an extensive description of its functionality and assess the integrity of its code.
\n\n\n
Contract Description

The PutNodesProtoManager smart contract plays a pivotal role in the PutNodes Ecosystem. This contract serves as the cornerstone for regulatory functions governing the ecosystem's operations. It comprises several abstract contracts, including Context, boostManager, feeManager, and prevProtoStarManager, all of which hold functions critical to the ecosystem's operation.

This contract also oversees parameters for node naming and the creation of new nodes while diligently tracking their life cycles, encompassing creation, claim times, and life decrease. When a node undergoes a collapse, it is meticulously recorded in a distinct array named "deadstars," with comprehensive explanations for its altered status. This feature enhances transparency and ensures a comprehensive record of all node states, benefiting every user.

Additionally, the contract facilitates token transactions, permitting the transfer of tokens in and out of the contract. Notably, this transactional capability can only be executed by the contract owner, ensuring both operational security and flexibility in fund and token management.

One of the contract's remarkable features is its adaptability to core component changes within the PutNodes ecosystem, such as modifications to the treasury, fee manager, or boosting manager, among others. This adaptability reinforces the system's capacity for upgrades and evolution.

In essence, the PutNodesProtoManager contract stands as a cornerstone of the PutNodes Ecosystem, managing essential functions, providing transparency, and demonstrating a high degree of adaptability, all contributing to the ecosystem's robustness and long-term viability.what exists below is a good synopsis of the entire ecosystem i am attempting to document thuroughly. i would like to create extended descriptions of the individual parts. so in the chunk data i will be providing a rouph draft of one of the parts as well as the conract code itsef so that a robust and exhaustive write up can be created for that portion of the ecosystem. i will try to go in the order as they arer below.

a short synopsis of the starts is that there are NFTsassociated with the project. 3 ters of NFT are available. the use of the NFTs within the project is that you can stake your 
NFT within the nodes you own. or rather, the nodes can  be housed within the NFT. (its maleable conceptually)

the rarest tier of NFT would allow you to own more nodes per NFT. the nodes pay out a dividend regularly. and the NFT has a set life span that the nodes can be housed for. the end of its term is denoted as proto collapse. theis supposedly is to incentivise the holding a rare NFT as you can better maximize your dividends through the life of the nodes.  
# PutNodes Ecosystem - Smart Contract Documentation
## Overview
The PutNodes ecosystem is a robust framework of interconnected smart contracts designed to operate within a decentralized network. This document provides an exhaustive overview of each smart contract involved in the PuTnodes ecosystem, detailing their functionalities and interrelationships.
\n\n\n
Overview of PutNodesFeeManager Contract

The PutNodesFeeManager contract is the cornerstone of fee management within the PutNodes ecosystem. It is intricately designed to handle a myriad of fees associated with ecosystem participants, known as protoOwners. Key features include handling transfers and allocations of fees in both AVAX and ERC-20 tokens, covering distributions to various stakeholders such as the team, reward recipients, and the treasury. The contract's design emphasizes transparency, with functionalities that include reconciliation, updates, freezing, and detailed fee calculations for each account and their NFTs, referred to as 'protos'.

Contract's Functionalities and Security Measures

This contract not only manages fees but also enhances the ecosystem's resilience and adaptability in managing NFTs (protos). It includes features for adding new protos, modifying existing proto data, and managing the lifecycle of NFTs within the ecosystem. Security is a critical aspect of the contract's operation, with only specific addresses like the 'owner,' 'manager,' or 'guard' authorized to execute operations. This ensures system integrity and mitigates risks.

The FeeManager contract also interacts with other subsystems within the PutNodes ecosystem, including the boostManager and protoStarManager. Its functionalities are organized into sections such as 'Updates,' 'Queries,' and 'internal gets,' each handling specific aspects like fee updates, time management, and protocol status determination.

Detailed Role and Impact within the Ecosystem

The FeeManager smart contract plays a pivotal role in monitoring and managing financial aspects within the ecosystem. It addresses issues like insolvency and collapse of NFTs, offering detailed insights into each NFT's financial standing and status. It provides transparency by tracking various statistics related to NFTs and their linked nodes. Additionally, the contract includes functions for fee freezing and fund transfers, entrusted exclusively to the contract owner, thus reinforcing security and robust fund management.

In conclusion, while a detailed code analysis is needed for a full evaluation, the FeeManager contract's well-structured operations and thoughtful architectural design suggest a high level of integrity and critical importance within the PutNodes ecosystem.
\n\n\n
Overview of the PutNodesBoostManager Contract

The PutNodesBoostManager contract is a key element that contributes to the suite of features provided by the PutNodes ecosystem. Specifically, this contract introduces a 'boost' functionality to the system, which offers an option for expedited dividends. Users can leverage this feature to shorten the lifespan of a node in exchange for accelerated dividends.

Contract Structure and Functionalities

The structure of this contract is intricate yet purposeful. It leverages multiple libraries and contracts including 'Ownable', 'Context', 'SafeMath', as well as abstract contracts 'feeManager', 'prevPutNodeProtoManager', and 'overseer'. This structure allows needed functionality to be seamlessly inheritted.

The contract is structured around multiple internal data types (structs) including PROTOstars, DEADStars, PENDING, and TIMES, and uses mappings to link addresses and account details within these structs. These data elements grant detailed insights relating to node and NFT (referred to as 'proto') operations, such as creation times, last claim times, boost rewards, total rewards, and life decrease.

Specifically, the PutNodesBoostManager contract manages enhanced dividends through its 'claimBoost' function, alongside its 'queryBoost' function which queries the potential boost rewards available to an account. The data returned by these functions correspond to the struct 'PENDING' and are derived from complex mathematical calculations, ensuring accuracy.

Notably, this contract allows parameters like 'feeManager', 'Guard' and Treasury to be updated, indicating flexibility and adaptability to change in the system's core elements.

Security Measures and Interactions

The contract is designed with safety measures in place. Its operations are guarded with multiple protections including 'managerOnly', 'onlyGuard' and 'onlyOwner' modifiers that restrict access to contract modifications by unauthorized parties.

It also interacts seamlessly with other components of the ecosystem such as the feeManager and the overseer contracts, enhancing the comprehensive nature of these smart contracts.

Overall, the PutNodesBoostManager, through its intricate structure and purpose-driven functionality, adds a layer of complexity and diversity to the overall offerings of the PutNodes ecosystem.
\n\n\n
Overview of nft_stake Contract in the PutNodes Ecosystem

The nft_stake contract is a vital entity within the PutNodes Ecosystem, primarily handling the staking of the NFTs (also called 'protos') associated with the project. This contract is crucial to realizing the proposed user participation mechanism, contributing vastly to the reward system's potency and timelines in the ecosystem.

Contract Features and Functionalities

At its core, the nft_stake contract inherits from the Ownable contract, hence allowing for clean transfer of ownership operations. The staking mechanism is designed to occur at three distinct levels, represented by three different tokenId (1, 2, 3) and handled by three corresponding mapping data structures (stakes_1, stakes_2, stakes_3). These structures capture the amount staked at each level and log the timestamp of the stake in an array.

When a user stakes a token, the contract increases the amount of their stake for the specific token type and logs the timestamp in the corresponding array. The staking function also transfers the tokens from the staker's address to the contract, fortified by the use of the ERC-1155 interface functions.

Similarly, unpaking activities are captured by the contract. The unstake function reduces the stake amount for the unstaked token, removes the oldest timestamp from the corresponding array, and transfers the tokens from the contract back to the unstaker's address.

The contract also includes utility functions for third-party querying about individual stake amounts, retrieval of specific stake timestamps, and checking if a specific address has staked tokens. Further, the contract owner can update the NFT contract address, allowing for adaptability in the system's operation.

Security Measures

In terms of security, key operations on this contract, such as contract address updates, are exclusive to an 'owner', thus minimizing potential for unwarranted access or exploit. Moreover, contract carries an implementation of the ERC1155Receiver function which mandates it to return an acknowledgement to incoming tokens and prevent transfers without receipts.

In Conclusion

Evidently, the nft_stake contract demonstrates a secure and coherent mechanism for staking different token types within the PutNodes Ecosystem. Its structure suggests an intricate design that balances user functionality with security, ultimately contributing to ecosystem robustness. However, a detailed code audit is recommended for the smart contract to establish a confidence in the security and integrity of the system.
\n\n\n
Overview of PutNodesNftMint Contract

The PutNodesNftMint contract plays an essential role in the PutNodes Ecosystem by handling the minting and allotment of NFTs to specific wallets. This smart contract directly manages the life-cycle of NFTs, from creation to distribution, thus significantly impacting the ecosystem's accessibility, robustness, and dynamic attributes.

Contract Features and Functionalities

This contract inherits the 'Context' contract specifications, thus enabling the exchange of messages between contracts in the ecosystem. The struct 'TOTALS' is designed to keep detailed records of each tier, the total supply of each tier, their equivalent in both USD and AVAX, and a 'full' parameter indicating if the maximum supply limit for any tier has been reached.

The constructor function, the first function to be called once during contract deployment, sets several vital parameters that govern the contract's overall functioning. The constructor function here sets the NFT address, Overseer address, NFT costs, and the maximum supplies limit.

There are two mint functions in the contract. The standard 'mint' function verifies the sending account's balance in NEBU tokens (an internal token for PutNodes, I assume), ensuring they have enough tokens to purchase an NFT. The function then proceeds to mint NFT to the sender's account and, if necessary, sends back any excess balance. The 'MGRmint' function only accessible to the manager, mints NFTs of specific tiers to specified accounts, with the ability to bypass specific checks and record the minting.

Contract's Security Measures

Concerning security measures, certain essential functions, such as updating the manager, updating the Guard address, and changing the grace period, can only be executed by the contract's owner. This measure reinforces permissioned access to the system's vital operations.

The contract also includes functions to perform checks and operations. 'updateTotals' function updates the totals of each tier after each minting for a given account. 'NFTaccountExists' function checks if a specific account exists in the NFT accounts array. 'nftAccountData' function returns the detailed stats of a specific NFT account, including the numbers of tier1,2,3 NFTs, the total number of NFTs, the total costs in USD and AVAX, the total fees, and whether the account is 'full' (reached the maximum number of NFTs allowed).

Overall, this contract appears to lay a strong foundation for the control, creation, and distribution of NFTs within the PutNodes ecosystem. However, to fully determine the contract's integrity and robustness, a comprehensive code review and audit are advised.
\n\n\n
Comprehensive Analysis of the PutNodes Overseer Contract

The PutNodes Overseer Contract is an integral part of the PutNodes ecosystem, functioning as an advanced oracle and quality assurance system. Although it does not interact directly with the core ecosystem, its role as an unbiased, secondary layer of verification is crucial for the smooth functioning of various ecosystem components. This includes overseeing rewards and dividend allotment based on NFT staking, managing boostManagement, and monitoring lifecycle parameters.

Structurally, the contract is built on the robust OpenZeppelin library, ensuring safe mathematical operations and standard functionalities. It inherits from the 'Ownable' and 'Authorizable' abstract contracts, which provide a solid framework for controlling access and managing different parts of the contract. This hierarchical structure of control is vital for maintaining security, especially in mutable administrative actions. The contract also interacts with established interfaces like IUniswapV2Pair and IERC20, enhancing its credibility and functionality.

In terms of specific features, the Overseer Contract includes vital functions such as 'isStaked', 'idAmount', and 'getTimes' from the 'nft_stake' abstract contract. These functionalities are key in managing and verifying the NFT staking aspect of the ecosystem. Additionally, the contract plays a significant administrative role, maintaining essential ecosystem components such as the treasury address, rewards wallet, and swap address. It also provides valuable on-chain metrics, like the native token's price in USD or relative to an ecosystem token.

One of the unique aspects of the contract is its 'updateLowPerc' function, which allows the contract owner to modify the 'low_perc' parameter, affecting critical ecosystem calculations. To ensure security, this function is restricted to the contract owner, reflecting the contract's stringent permissioned access and security controls. Similarly, functions related to token transfer and management, including 'transferOut' and 'sendTokenOut', are designed to be executed solely by the contract owner, further reinforcing the contract’s security framework.

Moreover, the contract's adaptability is evident in its 'updateOverseer' function, which enables updates to the Overseer contract's address. This ensures that the system remains flexible and responsive to changes within the ecosystem's core components. Additional security measures are implemented through the 'receive' and 'fallback' functions, which manage incoming Ether transfers and prevent unauthorized transactions.

In conclusion, the PutNodes Overseer Contract is meticulously designed to ensure the stability, integrity, and efficient utility of the PutNodes ecosystem. It serves as a critical entity, providing a 'second layer' verification system and acting as an oracle for both the internal ecosystem and third-party contracts. While its design and functionalities suggest a high level of integrity and robustness, a comprehensive code audit is recommended to fully ascertain its security and operational efficacy.
\n\n\n
Comprehensive Overview of Mathematical and Utility Libraries in the PutNodes Ecosystem

PutNodesMath Library: Ensuring Safe Mathematical Operations

The PutNodesMath library is an essential utility contract within the PutNodes ecosystem, designed to ensure safe mathematical operations and prevent arithmetic overflows or underflows. It leverages Solidity's 'unchecked' block to bypass overflow/underflow checks, reducing gas costs. The library uses functions from the 'SafeMath' library like 'tryAdd', 'trySub', 'tryMul', 'tryDiv', and 'tryMod', which provide fault-tolerant arithmetic operations. These functions return a boolean value indicating the operation's success, thereby ensuring accuracy and preventing undesired outcomes. Additional functions like 'add', 'sub', 'mul', 'div', and 'mod' execute arithmetic operations directly, assuming valid inputs. This approach is crucial for the PutNodes ecosystem’s contracts, where safe, unchecked math operations are essential.

PutMath Library: Core Mathematical and List Management Utility Functions

The PutMath Library acts as a supplementary component, providing core mathematical and list management utilities. It utilizes OpenZeppelin's SafeMath for secure arithmetic operations, thereby enhancing code reusability, security, and contract optimization. The library comprises various categories of functions:

    List Check: Functions like 'addressInList' and 'isInList' verify the presence of specific addresses in a list.
    Mathematical Functions: Includes 'decPercentage' and 'safeDiv' for percentage calculations and safe divisions.
    Utility Functions: Offers comparison operations like 'isLower', 'isHigher', 'isEqual', 'getLower', and 'getHigher'.

The 'EXT' keyword in some functions indicates their external accessibility, while non-EXT versions are internal. The library focuses on error-free computations and list manipulations, indirectly contributing to the security of contracts that utilize it.

boostLib: Enhancing the PutNodes Ecosystem’s Boost Feature

boostLib is integral to the PutNodes ecosystem, particularly in managing the 'Boost' feature. Built using SafeMath, it encompasses several critical functions:

    'calcReward': Computes rewards based on various parameters, enhancing the dynamic reward system.
    'doPercentage': Calculates specific percentages of an input, widely used across different smart contracts.
    'addFee' and 'getMultiple': Manage the boost functionality and find multiples, respectively.
    'isInList': Verifies user presence within the ecosystem.

The library’s design balances functionality with security, with SafeMath usage throughout preventing arithmetic overflow. While there appear to be no overt security issues, a thorough code audit is recommended for a complete vulnerability assessment.

In Summary

The integration of the PutNodesMath, PutMath, and boostLib libraries in the PutNodes ecosystem exemplifies a well-structured approach to handling mathematical operations, list management, and feature enhancement. These libraries play pivotal roles in ensuring safe computations, optimizing contract operations, and enhancing the ecosystem's overall functionality. Their collective implementation imparts an added degree of security and reliability, ensuring the integrity of mathematical operations throughout the ecosystem. However, regular code audits and quality checks are essential to maintain this high level of security and operational efficiency.the data below are the 3 library components unique to this project, PutNodesMath, PutLib, and BoostLib. they are each integrated as needed, with neccessity ranging in order they were presented. PutNodesMath is safely accessable to all contracts in the ecosystem, as with Puth Lib, and BoostLib is often implimented where Boost Functionality is either needed for implimentation or refference.  please provide an exhaustive write up about its functionality and percieved integrity oif the code
